For Taking the Dataset for faces
Step 1 : Import OpenCV, and numpy
Step 2 : Loading the Cascade File
Step 3 : Now Enter the Name of person
Step 4 : Using Cascade File use face Recognition for taking the data set of that person
Step 5 : Now Add these these images in .npy file format

For Face Recognition 
Step 1 : Import The OpenCV, numpy, and OS
Step 2 : Now Run the Program
Step 3 : Using KNN algorithm from the trained set of data Start check the matching of Face
Step 4 : If the face matches the face available in data set, then start showing the face with name on the top
Step 5 : Else name will not be able to show on the face



Details
ADDING THE DATA OF FACE IN THE SYSTEM

Step 1 : Importing all the important Modules which are required in running the Project
Step 2 : Using OpenCV package cv2.VideoCapture we have to initialize the camera with some variable lets say cap
Step 3 : Using the predefine cascade file named as "haarcascade_frontalface_alt.xml" with cv2.CascadeClassifier to be stored in variable lets say face_cascade for face detection
Step 4 : Use While loop until it get terminate
Step 5 : Enter the camera mode and make the image in cv2.COLOR_BGR2GRAY format which is basically grey format
Step 6 : Check if there is face then Continue
Step 7 : else jump to Step 12
Step 8 : Set the Frame to 1.3 and save this image as the name given by the user
Step 8 : Store this file in './data/' folder
Step 9 : Inside this folder add the file which should be name as "User_name".npy format
Step 10 : If the user click nothing then jump to Step 4 
step 11 : If the user click q from the keyboard then jump to Step 12
Step 12 : Terminate the Program
Step 13 : Finish


CHECK THE FACE RECOGNITION USING KNN(K-NEAREST NEIGHBOUR) ALGORITHM

Step 1 : Importing all the important Modules which are required in running the Project
Step 2 : Using OpenCV package cv2.VideoCapture we have to initialize the camera with some variable lets say cap
Step 3 : Using the predefine cascade file named as "haarcascade_frontalface_alt.xml" with cv2.CascadeClassifier to be stored in variable lets say face_cascade for face detection
Step 4 : Creating Datapath as string './data/' inside the variable dataset_path
Step 5 : Creating two empty list face_data and Labels and also initializing the variable class_id and name as an empty dictionary
Step 6 : Starting for loop in dataset_path
Step 7 : Adding all the data in the data from that folder which ends with .npy and making a dictionary with key as incremental class_id and value as facedata of specific person
Step 8 : Creating a labels for class
Step 9 : End for loop
Step 10 : Creating a function Distance(v1,v2)
Step 11 : return Euclidien formula i.e  sqrt(((v1-v2)**2).sum())
Step 12 : End of Step 10
Step 13 : Creating Function KNN(train, test,k =5)
Step 14 : Initilizing dist as empty list
Step 15 : for i in range(train.shape[0]):
Step 16 : Get the vector and label
			ix = train[i, :-1]
			iy = train[i, -1]
Step 17 : Compute the distance from test point
			d = distance(test, ix)
			dist.append([d, iy])
Step 18 : Sort based on distance and get top k
			dk = sorted(dist, key=lambda x: x[0])[:k]
Step 19 : Retrieve only the labels
			labels = np.array(dk)[:, -1]
	
Step 20 : Get frequencies of each label
			output = np.unique(labels, return_counts=True)
Step 21 : Find max frequency and corresponding label
			index = np.argmax(output[1])
Step 22 : return output[0][index]
Step 23 : End of Step 13
Step 24 : creating variable trainset = np.concatenate((face_dataset,face_labels),axis=1) for comparing the face for the dataset
Step 24 : Using while loop until it get terminate
Step 25 : If there is face on the screen then create for loop with the number of faces
Step 26 : Else jump to Step 32
Step 27 : Check the offset of the image for the cap from Step 2 
Step 28 : Prediction Label jump to Step 13 with trainset and face_section as arguments
Step 29 : Display on the screen the name and rectangle around it
			pred_name = names[int(out)]
			cv2.putText(frame,pred_name,(x,y-10),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),2,cv2.LINE_AA)
			cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,255),2)
Step 30 : If the user click nothing then jump to Step 24
Step 31 : If the user click q from the keyboard then jump to Step 32
Step 32 : Terminate the program
Step 32 : Finish







